/* tslint:disable */
/* eslint-disable */
/**
 * sprinkles/v1/api.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1DeleteResponse,
  V1Groups,
  V1Hellos,
  V1OptionDefinitions,
  V1OptionOverrides,
  V1OptionValueResponse,
  V1UpsertGroupsRequest,
  V1UpsertHellosRequest,
  V1UpsertOptionDefinitionsRequest,
  V1UpsertOptionOverridesRequest,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1DeleteResponseFromJSON,
    V1DeleteResponseToJSON,
    V1GroupsFromJSON,
    V1GroupsToJSON,
    V1HellosFromJSON,
    V1HellosToJSON,
    V1OptionDefinitionsFromJSON,
    V1OptionDefinitionsToJSON,
    V1OptionOverridesFromJSON,
    V1OptionOverridesToJSON,
    V1OptionValueResponseFromJSON,
    V1OptionValueResponseToJSON,
    V1UpsertGroupsRequestFromJSON,
    V1UpsertGroupsRequestToJSON,
    V1UpsertHellosRequestFromJSON,
    V1UpsertHellosRequestToJSON,
    V1UpsertOptionDefinitionsRequestFromJSON,
    V1UpsertOptionDefinitionsRequestToJSON,
    V1UpsertOptionOverridesRequestFromJSON,
    V1UpsertOptionOverridesRequestToJSON,
} from '../models/index';

export interface ApiDeleteGroupsRequest {
    name?: Array<string>;
    forceCascade?: boolean;
}

export interface ApiDeleteHellosRequest {
    ids?: Array<string>;
}

export interface ApiDeleteOptionDefinitionsRequest {
    ids?: Array<string>;
}

export interface ApiDeleteOptionOverridesRequest {
    ids?: Array<string>;
}

export interface ApiGetHellosRequest {
    ids?: Array<string>;
}

export interface ApiGetOptionDefinitionsRequest {
    ids?: Array<string>;
}

export interface ApiGetOptionOverridesRequest {
    ids?: Array<string>;
}

export interface ApiGetOptionValueRequest {
    name?: string;
    ignoreGroups?: Array<string>;
}

export interface ApiGetOptionsByGroupRequest {
    groups?: Array<string>;
}

export interface ApiListGroupsRequest {
    limit?: number;
    offset?: number;
    orderBy?: string;
}

export interface ApiListHellosRequest {
    limit?: number;
    offset?: number;
    orderBy?: string;
}

export interface ApiListOptionDefinitionsRequest {
    limit?: number;
    offset?: number;
    orderBy?: string;
}

export interface ApiListOptionOverridesRequest {
    limit?: number;
    offset?: number;
    orderBy?: string;
}

export interface ApiUpsertGroupsRequest {
    body: V1UpsertGroupsRequest;
}

export interface ApiUpsertHellosRequest {
    body: V1UpsertHellosRequest;
}

export interface ApiUpsertOptionDefinitionsRequest {
    body: V1UpsertOptionDefinitionsRequest;
}

export interface ApiUpsertOptionOverridesRequest {
    body: V1UpsertOptionOverridesRequest;
}

/**
 * ApiApi - interface
 * 
 * @export
 * @interface ApiApiInterface
 */
export interface ApiApiInterface {
    /**
     * 
     * @param {Array<string>} [name] 
     * @param {boolean} [forceCascade] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiDeleteGroupsRaw(requestParameters: ApiDeleteGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>>;

    /**
     */
    apiDeleteGroups(requestParameters: ApiDeleteGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiDeleteHellosRaw(requestParameters: ApiDeleteHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>>;

    /**
     */
    apiDeleteHellos(requestParameters: ApiDeleteHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiDeleteOptionDefinitionsRaw(requestParameters: ApiDeleteOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>>;

    /**
     */
    apiDeleteOptionDefinitions(requestParameters: ApiDeleteOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiDeleteOptionOverridesRaw(requestParameters: ApiDeleteOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>>;

    /**
     */
    apiDeleteOptionOverrides(requestParameters: ApiDeleteOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiGetHellosRaw(requestParameters: ApiGetHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Hellos>>;

    /**
     */
    apiGetHellos(requestParameters: ApiGetHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Hellos>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiGetOptionDefinitionsRaw(requestParameters: ApiGetOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionDefinitions>>;

    /**
     */
    apiGetOptionDefinitions(requestParameters: ApiGetOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionDefinitions>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiGetOptionOverridesRaw(requestParameters: ApiGetOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>>;

    /**
     */
    apiGetOptionOverrides(requestParameters: ApiGetOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides>;

    /**
     * 
     * @param {string} [name] 
     * @param {Array<string>} [ignoreGroups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiGetOptionValueRaw(requestParameters: ApiGetOptionValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionValueResponse>>;

    /**
     */
    apiGetOptionValue(requestParameters: ApiGetOptionValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionValueResponse>;

    /**
     * 
     * @param {Array<string>} [groups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiGetOptionsByGroupRaw(requestParameters: ApiGetOptionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>>;

    /**
     */
    apiGetOptionsByGroup(requestParameters: ApiGetOptionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides>;

    /**
     * 
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiHealthyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Health check
     */
    apiHealthy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiListGroupsRaw(requestParameters: ApiListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Groups>>;

    /**
     */
    apiListGroups(requestParameters: ApiListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Groups>;

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiListHellosRaw(requestParameters: ApiListHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Hellos>>;

    /**
     */
    apiListHellos(requestParameters: ApiListHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Hellos>;

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiListOptionDefinitionsRaw(requestParameters: ApiListOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionDefinitions>>;

    /**
     */
    apiListOptionDefinitions(requestParameters: ApiListOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionDefinitions>;

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiListOptionOverridesRaw(requestParameters: ApiListOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>>;

    /**
     */
    apiListOptionOverrides(requestParameters: ApiListOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides>;

    /**
     * 
     * @summary Readiness check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiReadyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Readiness check
     */
    apiReady(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {V1UpsertGroupsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUpsertGroupsRaw(requestParameters: ApiUpsertGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Groups>>;

    /**
     */
    apiUpsertGroups(requestParameters: ApiUpsertGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Groups>;

    /**
     * 
     * @param {V1UpsertHellosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUpsertHellosRaw(requestParameters: ApiUpsertHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Hellos>>;

    /**
     */
    apiUpsertHellos(requestParameters: ApiUpsertHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Hellos>;

    /**
     * 
     * @param {V1UpsertOptionDefinitionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUpsertOptionDefinitionsRaw(requestParameters: ApiUpsertOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionDefinitions>>;

    /**
     */
    apiUpsertOptionDefinitions(requestParameters: ApiUpsertOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionDefinitions>;

    /**
     * 
     * @param {V1UpsertOptionOverridesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUpsertOptionOverridesRaw(requestParameters: ApiUpsertOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>>;

    /**
     */
    apiUpsertOptionOverrides(requestParameters: ApiUpsertOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides>;

}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI implements ApiApiInterface {

    /**
     */
    async apiDeleteGroupsRaw(requestParameters: ApiDeleteGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        const queryParameters: any = {};

        if (requestParameters.name) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.forceCascade !== undefined) {
            queryParameters['force_cascade'] = requestParameters.forceCascade;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/groups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiDeleteGroups(requestParameters: ApiDeleteGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse> {
        const response = await this.apiDeleteGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDeleteHellosRaw(requestParameters: ApiDeleteHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/hellos`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiDeleteHellos(requestParameters: ApiDeleteHellosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse> {
        const response = await this.apiDeleteHellosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDeleteOptionDefinitionsRaw(requestParameters: ApiDeleteOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_definitions/get`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiDeleteOptionDefinitions(requestParameters: ApiDeleteOptionDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse> {
        const response = await this.apiDeleteOptionDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDeleteOptionOverridesRaw(requestParameters: ApiDeleteOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_overrides/get`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiDeleteOptionOverrides(requestParameters: ApiDeleteOptionOverridesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse> {
        const response = await this.apiDeleteOptionOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGetHellosRaw(requestParameters: ApiGetHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Hellos>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/hellos/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HellosFromJSON(jsonValue));
    }

    /**
     */
    async apiGetHellos(requestParameters: ApiGetHellosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Hellos> {
        const response = await this.apiGetHellosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGetOptionDefinitionsRaw(requestParameters: ApiGetOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionDefinitions>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_definitions/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionDefinitionsFromJSON(jsonValue));
    }

    /**
     */
    async apiGetOptionDefinitions(requestParameters: ApiGetOptionDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionDefinitions> {
        const response = await this.apiGetOptionDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGetOptionOverridesRaw(requestParameters: ApiGetOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_overrides/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionOverridesFromJSON(jsonValue));
    }

    /**
     */
    async apiGetOptionOverrides(requestParameters: ApiGetOptionOverridesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides> {
        const response = await this.apiGetOptionOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGetOptionValueRaw(requestParameters: ApiGetOptionValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionValueResponse>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ignoreGroups) {
            queryParameters['ignore_groups'] = requestParameters.ignoreGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_value/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionValueResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiGetOptionValue(requestParameters: ApiGetOptionValueRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionValueResponse> {
        const response = await this.apiGetOptionValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGetOptionsByGroupRaw(requestParameters: ApiGetOptionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>> {
        const queryParameters: any = {};

        if (requestParameters.groups) {
            queryParameters['groups'] = requestParameters.groups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/options_by_group/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionOverridesFromJSON(jsonValue));
    }

    /**
     */
    async apiGetOptionsByGroup(requestParameters: ApiGetOptionsByGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides> {
        const response = await this.apiGetOptionsByGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check
     */
    async apiHealthyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Health check
     */
    async apiHealthy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiHealthyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListGroupsRaw(requestParameters: ApiListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Groups>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/groups/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GroupsFromJSON(jsonValue));
    }

    /**
     */
    async apiListGroups(requestParameters: ApiListGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Groups> {
        const response = await this.apiListGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListHellosRaw(requestParameters: ApiListHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Hellos>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/hellos/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HellosFromJSON(jsonValue));
    }

    /**
     */
    async apiListHellos(requestParameters: ApiListHellosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Hellos> {
        const response = await this.apiListHellosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListOptionDefinitionsRaw(requestParameters: ApiListOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionDefinitions>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_definitions/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionDefinitionsFromJSON(jsonValue));
    }

    /**
     */
    async apiListOptionDefinitions(requestParameters: ApiListOptionDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionDefinitions> {
        const response = await this.apiListOptionDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListOptionOverridesRaw(requestParameters: ApiListOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/option_overrides/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionOverridesFromJSON(jsonValue));
    }

    /**
     */
    async apiListOptionOverrides(requestParameters: ApiListOptionOverridesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides> {
        const response = await this.apiListOptionOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Readiness check
     */
    async apiReadyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Readiness check
     */
    async apiReady(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiReadyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpsertGroupsRaw(requestParameters: ApiUpsertGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Groups>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiUpsertGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpsertGroupsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GroupsFromJSON(jsonValue));
    }

    /**
     */
    async apiUpsertGroups(requestParameters: ApiUpsertGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Groups> {
        const response = await this.apiUpsertGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpsertHellosRaw(requestParameters: ApiUpsertHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Hellos>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiUpsertHellos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/hellos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpsertHellosRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HellosFromJSON(jsonValue));
    }

    /**
     */
    async apiUpsertHellos(requestParameters: ApiUpsertHellosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Hellos> {
        const response = await this.apiUpsertHellosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpsertOptionDefinitionsRaw(requestParameters: ApiUpsertOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionDefinitions>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiUpsertOptionDefinitions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/option_definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpsertOptionDefinitionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionDefinitionsFromJSON(jsonValue));
    }

    /**
     */
    async apiUpsertOptionDefinitions(requestParameters: ApiUpsertOptionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionDefinitions> {
        const response = await this.apiUpsertOptionDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpsertOptionOverridesRaw(requestParameters: ApiUpsertOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OptionOverrides>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiUpsertOptionOverrides.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/option_overrides`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpsertOptionOverridesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OptionOverridesFromJSON(jsonValue));
    }

    /**
     */
    async apiUpsertOptionOverrides(requestParameters: ApiUpsertOptionOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OptionOverrides> {
        const response = await this.apiUpsertOptionOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
